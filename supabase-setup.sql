-- 视频工具平台完整数据库架构（安全版本）
-- 处理已存在的对象

-- 1. 用户配置表
create table if not exists public.user_profiles (
  id          uuid references auth.users on delete cascade primary key,
  username    text unique,
  display_name text,
  avatar_url  text,
  bio         text,
  preferences jsonb default '{}',
  created_at  timestamptz default now(),
  updated_at  timestamptz default now()
);

-- 2. 项目表 (增强版) - 如果已存在，先删除触发器
drop trigger if exists update_projects_updated_at on public.projects;

-- 3. 字幕文件表
create table if not exists public.subtitle_files (
  id          bigint generated by default as identity primary key,
  project_id  bigint references public.projects on delete cascade,
  name        text not null,
  format      text not null check (format in ('srt', 'vtt', 'ass', 'ssa')),
  content     text,
  file_url    text,
  language    text default 'zh-CN',
  created_at  timestamptz default now(),
  updated_at  timestamptz default now()
);

-- 4. 音频文件表
create table if not exists public.audio_files (
  id          bigint generated by default as identity primary key,
  project_id  bigint references public.projects on delete cascade,
  name        text not null,
  file_url    text not null,
  duration    numeric,
  format      text,
  size        bigint,
  created_at  timestamptz default now()
);

-- 5. 视频文件表
create table if not exists public.video_files (
  id          bigint generated by default as identity primary key,
  project_id  bigint references public.projects on delete cascade,
  name        text not null,
  file_url    text not null,
  duration    numeric,
  format      text,
  resolution  text,
  size        bigint,
  created_at  timestamptz default now()
);

-- 6. 处理任务表
create table if not exists public.processing_tasks (
  id          bigint generated by default as identity primary key,
  user_id     uuid not null references auth.users on delete cascade,
  project_id  bigint references public.projects on delete cascade,
  task_type   text not null check (task_type in ('subtitle_generation', 'audio_extraction', 'video_processing')),
  status      text default 'pending' check (status in ('pending', 'processing', 'completed', 'failed')),
  progress    integer default 0 check (progress >= 0 and progress <= 100),
  result      jsonb,
  error_message text,
  created_at  timestamptz default now(),
  updated_at  timestamptz default now()
);

-- 7. 用户使用统计表
create table if not exists public.user_stats (
  id          bigint generated by default as identity primary key,
  user_id     uuid not null references auth.users on delete cascade,
  date        date not null,
  projects_created integer default 0,
  files_uploaded integer default 0,
  processing_time integer default 0, -- 秒
  storage_used bigint default 0, -- 字节
  created_at  timestamptz default now(),
  unique(user_id, date)
);

-- 启用行级安全（如果还没启用）
alter table public.user_profiles enable row level security;
alter table public.subtitle_files enable row level security;
alter table public.audio_files enable row level security;
alter table public.video_files enable row level security;
alter table public.processing_tasks enable row level security;
alter table public.user_stats enable row level security;

-- 删除已存在的策略（如果存在）
drop policy if exists "users can view own profile" on public.user_profiles;
drop policy if exists "users can update own profile" on public.user_profiles;
drop policy if exists "users can insert own profile" on public.user_profiles;

drop policy if exists "users can view own subtitle files" on public.subtitle_files;
drop policy if exists "users can insert own subtitle files" on public.subtitle_files;
drop policy if exists "users can update own subtitle files" on public.subtitle_files;
drop policy if exists "users can delete own subtitle files" on public.subtitle_files;

drop policy if exists "users can view own audio files" on public.audio_files;
drop policy if exists "users can insert own audio files" on public.audio_files;
drop policy if exists "users can delete own audio files" on public.audio_files;

drop policy if exists "users can view own video files" on public.video_files;
drop policy if exists "users can insert own video files" on public.video_files;
drop policy if exists "users can delete own video files" on public.video_files;

drop policy if exists "users can view own tasks" on public.processing_tasks;
drop policy if exists "users can insert own tasks" on public.processing_tasks;
drop policy if exists "users can update own tasks" on public.processing_tasks;

drop policy if exists "users can view own stats" on public.user_stats;
drop policy if exists "users can insert own stats" on public.user_stats;
drop policy if exists "users can update own stats" on public.user_stats;

-- 创建安全策略

-- 用户配置策略
create policy "users can view own profile" on public.user_profiles
for select using (auth.uid() = id);

create policy "users can update own profile" on public.user_profiles
for update using (auth.uid() = id);

create policy "users can insert own profile" on public.user_profiles
for insert with check (auth.uid() = id);

-- 字幕文件策略
create policy "users can view own subtitle files" on public.subtitle_files
for select using (
  project_id in (
    select id from public.projects where user_id = auth.uid()
  )
);

create policy "users can insert own subtitle files" on public.subtitle_files
for insert with check (
  project_id in (
    select id from public.projects where user_id = auth.uid()
  )
);

create policy "users can update own subtitle files" on public.subtitle_files
for update using (
  project_id in (
    select id from public.projects where user_id = auth.uid()
  )
);

create policy "users can delete own subtitle files" on public.subtitle_files
for delete using (
  project_id in (
    select id from public.projects where user_id = auth.uid()
  )
);

-- 音频文件策略
create policy "users can view own audio files" on public.audio_files
for select using (
  project_id in (
    select id from public.projects where user_id = auth.uid()
  )
);

create policy "users can insert own audio files" on public.audio_files
for insert with check (
  project_id in (
    select id from public.projects where user_id = auth.uid()
  )
);

create policy "users can delete own audio files" on public.audio_files
for delete using (
  project_id in (
    select id from public.projects where user_id = auth.uid()
  )
);

-- 视频文件策略
create policy "users can view own video files" on public.video_files
for select using (
  project_id in (
    select id from public.projects where user_id = auth.uid()
  )
);

create policy "users can insert own video files" on public.video_files
for insert with check (
  project_id in (
    select id from public.projects where user_id = auth.uid()
  )
);

create policy "users can delete own video files" on public.video_files
for delete using (
  project_id in (
    select id from public.projects where user_id = auth.uid()
  )
);

-- 处理任务策略
create policy "users can view own tasks" on public.processing_tasks
for select using (user_id = auth.uid());

create policy "users can insert own tasks" on public.processing_tasks
for insert with check (user_id = auth.uid());

create policy "users can update own tasks" on public.processing_tasks
for update using (user_id = auth.uid());

-- 用户统计策略
create policy "users can view own stats" on public.user_stats
for select using (user_id = auth.uid());

create policy "users can insert own stats" on public.user_stats
for insert with check (user_id = auth.uid());

create policy "users can update own stats" on public.user_stats
for update using (user_id = auth.uid());

-- 创建或更新函数
create or replace function update_updated_at_column()
returns trigger as $$
begin
    new.updated_at = now();
    return new;
end;
$$ language plpgsql;

-- 删除已存在的触发器（如果存在）
drop trigger if exists update_user_profiles_updated_at on public.user_profiles;
drop trigger if exists update_subtitle_files_updated_at on public.subtitle_files;
drop trigger if exists update_processing_tasks_updated_at on public.processing_tasks;

-- 创建触发器
create trigger update_user_profiles_updated_at
    before update on public.user_profiles
    for each row
    execute function update_updated_at_column();

create trigger update_subtitle_files_updated_at
    before update on public.subtitle_files
    for each row
    execute function update_updated_at_column();

create trigger update_processing_tasks_updated_at
    before update on public.processing_tasks
    for each row
    execute function update_updated_at_column();

-- 创建用户配置文件触发器
create or replace function handle_new_user()
returns trigger as $$
begin
    insert into public.user_profiles (id, username, display_name)
    values (new.id, new.email, new.raw_user_meta_data->>'display_name');
    return new;
end;
$$ language plpgsql security definer;

-- 删除已存在的触发器（如果存在）
drop trigger if exists on_auth_user_created on auth.users;

create trigger on_auth_user_created
    after insert on auth.users
    for each row execute procedure handle_new_user();
