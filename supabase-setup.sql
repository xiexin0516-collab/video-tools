-- 视频工具平台 Supabase 数据库配置
-- 在 Supabase SQL Editor 中执行以下SQL

-- 1. 创建项目表
create table if not exists public.projects (
  id          bigint generated by default as identity primary key,
  user_id     uuid not null,
  name        text not null,
  audio_url   text,
  subtitles   jsonb,
  created_at  timestamptz default now(),
  updated_at  timestamptz default now()
);

-- 2. 启用行级安全
alter table public.projects enable row level security;

-- 3. 创建安全策略
create policy "projects_owner_select" on public.projects
for select to authenticated
using (user_id = auth.uid());

create policy "projects_owner_insert" on public.projects
for insert to authenticated
with check (user_id = auth.uid());

create policy "projects_owner_update" on public.projects
for update to authenticated
using (user_id = auth.uid());

create policy "projects_owner_delete" on public.projects
for delete to authenticated
using (user_id = auth.uid());

-- 4. 创建更新时间触发器
create or replace function update_updated_at_column()
returns trigger as $$
begin
    new.updated_at = now();
    return new;
end;
$$ language plpgsql;

create trigger update_projects_updated_at
    before update on public.projects
    for each row
    execute function update_updated_at_column();

-- 5. 创建存储bucket（需要在Supabase Dashboard中手动创建）
-- 在 Storage > Create bucket 中创建名为 'vidtools' 的私有bucket

-- 6. 创建存储策略（创建bucket后执行）
create policy "allow_read_own_files" on storage.objects
for select to authenticated
using (bucket_id = 'vidtools' and owner = auth.uid());

create policy "allow_write_own_files" on storage.objects
for insert to authenticated
with check (bucket_id = 'vidtools' and owner = auth.uid());

create policy "allow_update_own_files" on storage.objects
for update to authenticated
using (bucket_id = 'vidtools' and owner = auth.uid());

create policy "allow_delete_own_files" on storage.objects
for delete to authenticated
using (bucket_id = 'vidtools' and owner = auth.uid());
